{
	"name": "df_breed_dim",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_read_parquets",
						"type": "DatasetReference"
					},
					"name": "oppar"
				},
				{
					"dataset": {
						"referenceName": "ds_edw_breeddim",
						"type": "DatasetReference"
					},
					"name": "sourcebreeddim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_edw_breeddim",
						"type": "DatasetReference"
					},
					"name": "outputsinkbreed"
				}
			],
			"transformations": [
				{
					"name": "sourcedatawithsk"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DI_JOB_ID as string (\"59\")",
				"}",
				"source(output(",
				"          License_Issue_Date as string,",
				"          License_Number as string,",
				"          Animal_Name as string,",
				"          Species as string,",
				"          Primary_Breed as string,",
				"          Secondary_Breed as string,",
				"          ZIP_Code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     inferDriftedColumnTypes: true,",
				"     limit: 10000,",
				"     ignoreNoFilesFound: true,",
				"     format: 'parquet') ~> oppar",
				"source(output(",
				"          MAXBREEDSK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select NVL(MAX(BREED_SK),0) as MaxBreedSK from BREED_DIM',",
				"     format: 'query') ~> sourcebreeddim",
				"oppar, sourcebreeddim join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> sourcedatawithsk",
				"sourcedatawithsk aggregate(groupBy(Primary_Breed,",
				"          Species,",
				"          Secondary_Breed,",
				"          MAXBREEDSK),",
				"     COUNT_ROW = count(License_Number)) ~> aggregate1",
				"aggregate1 keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(BREED_SK = MAXBREEDSK + RowNum,",
				"          DI_CREATED_DT = toString(currentDate(),'yyyy-MM-dd'),",
				"          DI_JOB_ID = $DI_JOB_ID) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BREED_SK as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          SPECIES_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          BREED_SK,",
				"          PRIMARY_BREED_NAME = Primary_Breed,",
				"          SECONDARY_BREED_NAME = Secondary_Breed,",
				"          SPECIES_NAME = Species,",
				"          DI_JOB_ID,",
				"          DI_CREATED_DT",
				"     )) ~> outputsinkbreed"
			]
		}
	}
}