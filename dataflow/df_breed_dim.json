{
	"name": "df_breed_dim",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_read_parquets",
						"type": "DatasetReference"
					},
					"name": "oppar"
				},
				{
					"dataset": {
						"referenceName": "ds_edw_breeddim",
						"type": "DatasetReference"
					},
					"name": "sourcebreeddim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_edw_breeddim",
						"type": "DatasetReference"
					},
					"name": "outputsinkbreed"
				}
			],
			"transformations": [
				{
					"name": "sourcedatawithsk"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DI_JOB_ID as string (\"59\")",
				"}",
				"source(output(",
				"          License_Issue_Date as string,",
				"          License_Number as string,",
				"          Animal_Name as string,",
				"          Species as string,",
				"          Primary_Breed as string,",
				"          Secondary_Breed as string,",
				"          ZIP_Code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     inferDriftedColumnTypes: true,",
				"     limit: 100,",
				"     ignoreNoFilesFound: true,",
				"     format: 'parquet') ~> oppar",
				"source(output(",
				"          MAXBREEDSK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select NVL(MAX(BREED_SK),0) as MaxBreedSK from BREED_DIM',",
				"     format: 'query') ~> sourcebreeddim",
				"oppar, sourcebreeddim join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> sourcedatawithsk",
				"sourcedatawithsk aggregate(groupBy(Primary_Breed,",
				"          Species,",
				"          Secondary_Breed,",
				"          MAXBREEDSK)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BREED_SK as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          SPECIES_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true) ~> outputsinkbreed"
			]
		}
	}
}