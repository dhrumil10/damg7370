{
	"name": "df_breed_dim",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_snowflaje_stg",
						"type": "DatasetReference"
					},
					"name": "sorcesnowflakestage"
				},
				{
					"dataset": {
						"referenceName": "ds_edw_breeddim",
						"type": "DatasetReference"
					},
					"name": "sourcebreeddim"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "sourcedatawithsk"
				},
				{
					"name": "aggregatebreedkeys",
					"description": "Add aggregate columns gnerates and aggregate columns such as primary breed, secondary breed,  maxbreedsk, species"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_CREATED_DATE as string,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     format: 'table') ~> sorcesnowflakestage",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select NVL(MAX(BREED_SK),0) as MaxBreedSK from DEV_DB.STAGGING.BREED_DIM',",
				"     format: 'query') ~> sourcebreeddim",
				"sorcesnowflakestage, sourcebreeddim join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> sourcedatawithsk",
				"sourcedatawithsk aggregate(groupBy(SPECIES,",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          {} = ERROR_FUNCTION(''))) ~> aggregatebreedkeys"
			]
		}
	}
}